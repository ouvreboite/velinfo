AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: velinfo.fr serveless application

Globals:
  Function:
    Timeout: 30
    Handler: app.lambdaHandler
    Runtime: nodejs14.x
    Environment: 
        Variables:
          NODE_OPTIONS: --enable-source-maps

Parameters:
  CDNCertificateArn:
    Type: String
  CDNApiCertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  TwitterConsumerKey:
    Type: String
  TwitterConsumerSecret:
    Type: String
  TwitterAccessToken:
    Type: String 
  TwitterAccessTokenSecret:
    Type: String 
  AlarmNotificationArn: 
    Type: String

Resources:
  # Lambdas
  FetchStationsContent:
    Type: AWS::Serverless::Function
    DependsOn: StationsContentTable
    Properties:
      FunctionName: FetchStationsContent
      Description: Fetch the station content from the Paris API every minute and update the current stations content dynamo table
      CodeUri: lambda/FetchStationsContent
      MemorySize: 160
      Events:
          EveryMinute:
            Type: Schedule
            Properties:
              Schedule: rate(1 minute)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationsContentTable

  FetchStationsCharacteristics:
    Type: AWS::Serverless::Function
    DependsOn: StationCharacteristicsTable
    Properties:
      FunctionName: FetchStationsCharacteristics
      Description: Fetch the station characteristics from the Velib API every hour and update the current characteristics dynamo table
      CodeUri: lambda/FetchStationsCharacteristics
      MemorySize: 160
      Events:
          EveryHour:
            Type: Schedule
            Properties:
              Schedule: rate(1 hour)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationCharacteristicsTable

  ComputeUsage:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationsContentTable
      - StationUsageStatisticsTable
      - DailyNetworkUsageStatisticsTable
    Properties:
      FunctionName: ComputeUsage
      Description: Process every update of the current content table to compute usage stats for each station
      CodeUri: lambda/ComputeUsage
      Events:
        StreamContent:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt StationsContentTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref DailyNetworkUsageStatisticsTable

  ComputeMedianUsage:
    Type: AWS::Serverless::Function
    DependsOn: 
      - StationUsageStatisticsTable
      - MedianUsageTable
      - DailyNetworkUsagePredictionsTable
    Properties:
      FunctionName: ComputeMedianUsage
      Description: Compute the median usage per week day and 5 minute timeslot
      CodeUri: lambda/ComputeMedianUsage
      Events:
          EveryHour:
            Type: Schedule
            Properties:
              Schedule: rate(5 minutes)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref MedianUsageTable
      - DynamoDBCrudPolicy:
          TableName: !Ref DailyNetworkUsagePredictionsTable

  ComputeStationsStates:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateTable
      - StationsContentTable
      - StationUsageStatisticsTable
      - MedianUsageTable
    Properties:
      FunctionName: ComputeStationsStates
      Description: Compute the state of each station
      CodeUri: lambda/ComputeStationsStates
      MemorySize: 160
      Environment: 
        Variables:
          LOCKED_THRESHOLD_MINUTES_MIN: 30
          LOCKED_ACTIVITY_THRESHOLD: 30
          UNLOCKED_ACTIVITY_THRESHOLD: 2
          GLOBAL_RATIO_MIN: 0
          GLOBAL_RATIO_MAX: 2
      Events:
        StreamContent:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt StationsContentTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateChangesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref MedianUsageTable
  
  GetStations:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateTable
      - StationsContentTable
      - StationCharacteristicsTable
    Properties:
      FunctionName: GetStations
      Description: Get the current stations states
      CodeUri: lambda/GetStations
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /stations
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationsContentTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationCharacteristicsTable

  GetPredictionByStations:
    Type: AWS::Serverless::Function
    DependsOn:
      - MedianUsageTable
    Properties:
      FunctionName: GetPredictionByStations
      Description: Get todays predicted activity for each stations
      CodeUri: lambda/GetPredictionByStations
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /prediction/by-station
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref MedianUsageTable  

  GetActivityByStations:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationUsageStatisticsTable
    Properties:
      FunctionName: GetActivityByStations
      Description: Get todays activity for each stations
      CodeUri: lambda/GetActivityByStations
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /activity/by-station
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable

  GetStateChanges:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateChangesTable
    Properties:
      FunctionName: GetStateChanges
      Description: Get last station state changes
      CodeUri: lambda/GetStateChanges
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /state-changes
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateChangesTable

  GetNetworkActivity:
    Type: AWS::Serverless::Function
    DependsOn:
      - DailyNetworkUsageStatisticsTable
    Properties:
      FunctionName: GetNetworkActivity
      Description: Get today's network's activity
      CodeUri: lambda/GetNetworkActivity
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /activity
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DailyNetworkUsageStatisticsTable

  GetNetworkPrediction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DailyNetworkUsagePredictionsTable
    Properties:
      FunctionName: GetNetworkPrediction
      Description: Get today's network's predictions
      CodeUri: lambda/GetNetworkPrediction
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /prediction
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DailyNetworkUsagePredictionsTable

  PublishStateChangeTweet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PublishStateChangeTweet
      Description: Tweet when a station state change
      CodeUri: lambda/PublishStateChangeTweet
      Environment: 
        Variables:
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
      Events:
        StreamStateChanges:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt StationStateChangesTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationCharacteristicsTable
     
  # Dynamo tables  
  StationsContentTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationsContent
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
        - AttributeName: dateTime
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
        - AttributeName: dateTime
          AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 4
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  StationCharacteristicsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationsCharacteristics
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
        - AttributeName: dateTime
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
        - AttributeName: dateTime
          AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 3
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true
  
  StationUsageStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationUsageStatistics
      KeySchema: 
        - AttributeName: day
          KeyType: HASH
        - AttributeName: timeslot
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: day
        AttributeType: S
      - AttributeName: timeslot
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 9
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  DailyNetworkUsageStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: DailyNetworkUsageStatistics
      KeySchema: 
        - AttributeName: day
          KeyType: HASH
      AttributeDefinitions:
      - AttributeName: day
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  DailyNetworkUsagePredictionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: DailyNetworkUsagePredictions
      KeySchema: 
        - AttributeName: weekday
          KeyType: HASH
      AttributeDefinitions:
      - AttributeName: weekday
        AttributeType: N
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  MedianUsageTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: MedianUsage
      KeySchema: 
        - AttributeName: weekday
          KeyType: HASH
        - AttributeName: timeslot
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: weekday
        AttributeType: N
      - AttributeName: timeslot
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 9
        WriteCapacityUnits: 1

  StationStateTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationState
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 4
  
  StationStateChangesTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationStateChanges
      KeySchema: 
        - AttributeName: day
          KeyType: HASH
        - AttributeName: datetime
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: day
        AttributeType: S
      - AttributeName: datetime
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  #API
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "https://www.velinfo.fr"

  #Website
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: velinfo-frontend
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  CDNOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Cloudfront Origin identity for www.velinfo.Fr"

  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginIdentity}"
            Resource: !Sub "arn:aws:s3:::${WebsiteS3Bucket}/*"
        Version: "2012-10-17"

  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - 'www.velinfo.fr'
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: True
          TargetOriginId: website
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCachingMinTTL: 10
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCachingMinTTL: 10
          ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        Enabled: True
        Origins:
          - DomainName: !GetAtt WebsiteS3Bucket.RegionalDomainName
            Id: website
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CDNCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig: 
        Name: ApiCachePolicy
        DefaultTTL: 60
        MinTTL: 60
        MaxTTL: 60
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig: 
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          HeadersConfig: 
            HeaderBehavior: whitelist
            Headers:
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
              - Origin 
          QueryStringsConfig: 
            QueryStringBehavior: none 

  ApiCDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - 'api.velinfo.fr'
        HttpVersion: http2
        DefaultCacheBehavior:
          CachePolicyId: !Ref ApiCachePolicy
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: api
          ViewerProtocolPolicy: redirect-to-https
        Enabled: True
        Origins:
          - DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
            Id: api
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CDNApiCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub 'www.velinfo.fr'
          Type: A
          AliasTarget:
            DNSName: !GetAtt CDN.DomainName
            HostedZoneId: Z2FDTNDATAQYW2 #CloudFront official hosted zone
        - Name: !Sub 'api.velinfo.fr'
          Type: A
          AliasTarget:
            DNSName: !GetAtt ApiCDN.DomainName
            HostedZoneId: Z2FDTNDATAQYW2 #CloudFront official hosted zone
  
  
  # Alerts
  FetchStationsContentError:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: FetchStationsContentError
        AlarmActions: 
            - !Ref AlarmNotificationArn
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Dimensions:
            - Name: FunctionName
              Value: FetchStationsContent
        Period: 300
        EvaluationPeriods: 1
        Threshold: 2
        ComparisonOperator: GreaterThanOrEqualToThreshold

  FetchStationsCharacteristicsError:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: FetchStationsCharacteristicsError
        AlarmActions:
            - !Ref AlarmNotificationArn
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Dimensions:
            - Name: FunctionName
              Value: FetchStationsCharacteristics
        Period: 21600
        EvaluationPeriods: 1
        Threshold: 2
        ComparisonOperator: GreaterThanOrEqualToThreshold

  AnyLambdaError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AnyLambdaError
      AlarmActions:
          - !Ref AlarmNotificationArn
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions: []
      Period: 900
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold

Outputs:
  WebsiteBucketUrl:
    Description: 'S3 Bucket Url'
    Value: !GetAtt 'WebsiteS3Bucket.WebsiteURL'
  ApiUrl:
    Description: 'HTTP API Url'
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"
  CDNDomainName:
    Description: 'HTTP API Url'
    Value: !GetAtt CDN.DomainName
  ApiCDNDomainName:
    Description: 'HTTP API Url'
    Value: !GetAtt ApiCDN.DomainName