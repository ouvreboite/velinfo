AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: velinfo.fr serveless application

Globals:
  Function:
    Timeout: 50

Resources:
  # Lambdas
  FetchStationsAvailabilities:
    Type: AWS::Serverless::Function
    DependsOn: CurrentAvailabilityTable
    Properties:
      FunctionName: FetchStationsAvailabilities
      Description: Fetch the station availabilities from the Paris API every minute and update the current availability dynamo table
      CodeUri: lambda/FetchStationsAvailabilities
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment: 
        Variables:
          AVAILABILITY_TABLE_NAME: !Ref CurrentAvailabilityTable
      Events:
          FetchStationsEveryMinute:
            Type: Schedule
            Properties:
              Schedule: rate(1 minute)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentAvailabilityTable

  ComputeHourlyStatistics:
    Type: AWS::Serverless::Function
    DependsOn:
      - CurrentAvailabilityTable
      - HourlyStatisticsTable
    Properties:
      FunctionName: ComputeHourlyStatistics
      Description: Process every update of the current availability table to compute hourly usage stats for each station
      CodeUri: lambda/ComputeHourlyStatistics
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment: 
        Variables:
          STATISTICS_TABLE_NAME: !Ref HourlyStatisticsTable
      Events:
        StreamAvailability:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CurrentAvailabilityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref HourlyStatisticsTable

  ComputeExpectedColdActivities:
    Type: AWS::Serverless::Function
    DependsOn:
      - CurrentAvailabilityTable
      - HourlyStatisticsTable
      - ExpectedColdActivityTable
    Properties:
      FunctionName: ComputeExpectedColdActivities
      Description: Compute the expected activity that every station should have seen since it became cold
      CodeUri: lambda/ComputeExpectedColdActivities
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment: 
        Variables:
          STATISTICS_TABLE_NAME: !Ref HourlyStatisticsTable
          EXPECTED_COLD_ACTIVITY_TABLE_NAME: !Ref ExpectedColdActivityTable
      Events:
        StreamAvailability:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CurrentAvailabilityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref HourlyStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ExpectedColdActivityTable

  ComputeStationsStates:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateTable
      - ExpectedColdActivityTable
    Properties:
      FunctionName: ComputeStationsStates
      Description: Compute the state of each station
      CodeUri: lambda/ComputeStationsStates
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment: 
        Variables:
          STATES_TABLE_NAME: !Ref StationStateTable
          COLD_THRESHOLD_MINUTES_MIN: 5
          COLD_THRESHOLD_MINUTES_MAX: 1080 #18 hours
          LOCKED_ACTIVITY_THRESHOLD: 50
      Events:
        StreamExpectedActivity:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt ExpectedColdActivityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
  
  GetStations:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateTable
      - CurrentAvailabilityTable
    Properties:
      FunctionName: GetStations
      Description: Get the current stations states
      CodeUri: lambda/GetStations
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment: 
        Variables:
          STATES_TABLE_NAME: !Ref StationStateTable
          AVAILABILITY_TABLE_NAME: !Ref CurrentAvailabilityTable
      Tracing: Active
      Events:
        GetApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /stations
            TimeoutInMillis: 15000
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentAvailabilityTable
          
  # Dynamo tables
  CurrentAvailabilityTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: CurrentAvailability
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 8
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  HourlyStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: HourlyStatistics
      KeySchema: 
        - AttributeName: stats_day
          KeyType: HASH
        - AttributeName: stats_datetime
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: stats_day
        AttributeType: S
      - AttributeName: stats_datetime
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 3
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  ExpectedColdActivityTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: ExpectedColdActivity
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 3
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  StationStateTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationState
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 4

  #Http API
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        info:
          title:
            Ref: AWS::StackName
          version: "1.0"
        openapi: 3.0.1
        paths:
          /stations:
            get:
              responses: {}

Outputs:
  HttpApiUrl:
    Value:
      Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'