AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: velinfo.fr serveless application

Globals:
  Function:
    Timeout: 50
    Handler: app.lambdaHandler
    Runtime: nodejs12.x

Parameters:
  CDNCertificateArn:
    Type: String
  APICertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  TwitterConsumerKey:
    Type: String
  TwitterConsumerSecret:
    Type: String
  TwitterAccessToken:
    Type: String 
  TwitterAccessTokenSecret:
    Type: String 

Resources:
  # Lambdas
  FetchStationsAvailabilities:
    Type: AWS::Serverless::Function
    DependsOn: CurrentAvailabilityTable
    Properties:
      FunctionName: FetchStationsAvailabilities
      Description: Fetch the station availabilities from the Paris API every minute and update the current availability dynamo table
      CodeUri: lambda/FetchStationsAvailabilities
      Events:
          EveryMinute:
            Type: Schedule
            Properties:
              Schedule: rate(1 minute)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentAvailabilityTable

  FetchStationsCharacteristics:
    Type: AWS::Serverless::Function
    DependsOn: CurrentCharacteristicsTable
    Properties:
      FunctionName: FetchStationsCharacteristics
      Description: Fetch the station characteristics from the Velib API every hour and update the current characteristics dynamo table
      CodeUri: lambda/FetchStationsCharacteristics
      Events:
          EveryHour:
            Type: Schedule
            Properties:
              Schedule: rate(1 hour)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentCharacteristicsTable

  ComputeHourlyStatistics:
    Type: AWS::Serverless::Function
    DependsOn:
      - CurrentAvailabilityTable
      - HourlyStatisticsTable
    Properties:
      FunctionName: ComputeHourlyStatistics
      Description: Process every update of the current availability table to compute hourly usage stats for each station
      CodeUri: lambda/ComputeHourlyStatistics
      Events:
        StreamAvailability:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CurrentAvailabilityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref HourlyStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable

  ComputeGlobalDailyStatistics:
    Type: AWS::Serverless::Function
    DependsOn:
      - CurrentAvailabilityTable
      - GlobalDailyStatisticsTable
    Properties:
      FunctionName: ComputeGlobalDailyStatistics
      Description: Process every update of the current availability table to compute global daily usage stats
      CodeUri: lambda/ComputeGlobalDailyStatistics
      Events:
        StreamAvailability:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CurrentAvailabilityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref GlobalDailyStatisticsTable

  ComputeExpectedActivities:
    Type: AWS::Serverless::Function
    DependsOn: 
      - HourlyStatisticsTable
      - ExpectedActivityTable
    Properties:
      FunctionName: ComputeExpectedActivities
      Description: Compute the expected station activity per week day and hour
      CodeUri: lambda/ComputeExpectedActivities
      Events:
          EveryHour:
            Type: Schedule
            Properties:
              Schedule: rate(1 hour)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref HourlyStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ExpectedActivityTable

  ComputeMedianUsage:
    Type: AWS::Serverless::Function
    DependsOn: 
      - StationUsageStatisticsTable
      - MedianUsageTable
    Properties:
      FunctionName: ComputeMedianUsage
      Description: Compute the median usage per week day and 5 minute timeslot
      CodeUri: lambda/ComputeMedianUsage
      Events:
          EveryHour:
            Type: Schedule
            Properties:
              Schedule: rate(5 minutes)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref MedianUsageTable

  ComputeStationsStates:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateTable
      - CurrentAvailabilityTable
    Properties:
      FunctionName: ComputeStationsStates
      Description: Compute the state of each station
      CodeUri: lambda/ComputeStationsStates
      Environment: 
        Variables:
          COLD_THRESHOLD_MINUTES_MIN: 60
          LOCKED_ACTIVITY_THRESHOLD: 40
          UNLOCKED_ACTIVITY_THRESHOLD: 2
      Events:
        StreamAvailability:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CurrentAvailabilityTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ExpectedActivityTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateChangesTable
  
  GetStations:
    Type: AWS::Serverless::Function
    DependsOn:
      - GlobalDailyStatisticsTable
      - CurrentAvailabilityTable
      - CurrentCharacteristicsTable
    Properties:
      FunctionName: GetStations
      Description: Get the current stations states
      CodeUri: lambda/GetStations
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /stations
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateTable
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentAvailabilityTable
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentCharacteristicsTable

  GetGlobalStatistics:
    Type: AWS::Serverless::Function
    DependsOn:
      - GlobalDailyStatisticsTable
    Properties:
      FunctionName: GetGlobalStatistics
      Description: Get todays global statistics
      CodeUri: lambda/GetGlobalStatistics
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /global-statistics
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref GlobalDailyStatisticsTable

  GetExpectedActivities:
    Type: AWS::Serverless::Function
    DependsOn:
      - ExpectedActivityTable
      - MedianUsageTable
    Properties:
      FunctionName: GetExpectedActivities
      Description: Get todays expected activities for each stations
      CodeUri: lambda/GetExpectedActivities
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /activities/expected
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ExpectedActivityTable
      - DynamoDBCrudPolicy:
          TableName: !Ref MedianUsageTable  

  GetActualActivities:
    Type: AWS::Serverless::Function
    DependsOn:
      - HourlyStatisticsTable
      - StationUsageStatisticsTable
    Properties:
      FunctionName: GetActualActivities
      Description: Get todays actual activities for each stations
      CodeUri: lambda/GetActualActivities
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /activities/actual
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref HourlyStatisticsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref StationUsageStatisticsTable

  GetStateChanges:
    Type: AWS::Serverless::Function
    DependsOn:
      - StationStateChangesTable
    Properties:
      FunctionName: GetStateChanges
      Description: Get last station state changes
      CodeUri: lambda/GetStateChanges
      MemorySize: 1769 #minimal memory to have a full vCPU
      Tracing: Active
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /state-changes
            Method: GET
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref StationStateChangesTable

  PublishStateChangeTweet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PublishStateChangeTweet
      Description: Tweet when a station state change
      CodeUri: lambda/PublishStateChangeTweet
      Environment: 
        Variables:
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
      Events:
        StreamStateChanges:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt StationStateChangesTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref CurrentCharacteristicsTable
     
  # Dynamo tables
  CurrentAvailabilityTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: CurrentAvailability
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 3
        WriteCapacityUnits: 4
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  CurrentCharacteristicsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: CurrentCharacteristics
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 3

  HourlyStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: HourlyStatistics
      KeySchema: 
        - AttributeName: stats_day
          KeyType: HASH
        - AttributeName: stats_datetime
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: stats_day
        AttributeType: S
      - AttributeName: stats_datetime
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true
  
  StationUsageStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationUsageStatistics
      KeySchema: 
        - AttributeName: day
          KeyType: HASH
        - AttributeName: timeslot
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: day
        AttributeType: S
      - AttributeName: timeslot
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true

  GlobalDailyStatisticsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: GlobalDailyStatistics
      KeySchema: 
        - AttributeName: stats_day
          KeyType: HASH
      AttributeDefinitions:
      - AttributeName: stats_day
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ExpectedActivityTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: ExpectedActivity
      KeySchema: 
        - AttributeName: weekday
          KeyType: HASH
        - AttributeName: hour
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: weekday
        AttributeType: N
      - AttributeName: hour
        AttributeType: N
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1
  
  MedianUsageTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: MedianUsage
      KeySchema: 
        - AttributeName: weekday
          KeyType: HASH
        - AttributeName: timeslot
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: weekday
        AttributeType: N
      - AttributeName: timeslot
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

  StationStateTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationState
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S 
      ProvisionedThroughput: 
        ReadCapacityUnits: 3
        WriteCapacityUnits: 5
  
  StationStateChangesTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: StationStateChanges
      KeySchema: 
        - AttributeName: day
          KeyType: HASH
        - AttributeName: datetime
          KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: day
        AttributeType: S
      - AttributeName: datetime
        AttributeType: S
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName : timetolive
        Enabled : true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  #Rest API
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Velinfo REST Api
      StageName: Production
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      Domain:
        DomainName: api.velinfo.fr
        CertificateArn: 
          Ref: APICertificateArn
        Route53:
          HostedZoneId: 
            Ref: HostedZoneId
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          CachingEnabled: true
          CacheTtlInSeconds: 60

  #Website
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: velinfo-frontend
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  CDNOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Cloudfront Origin identity for www.velinfo.Fr"

  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - 'www.velinfo.fr'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: 'true'
          ForwardedValues:
            QueryString: True
          TargetOriginId: !Sub "S3-origin-${WebsiteS3Bucket}"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCachingMinTTL: 10
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCachingMinTTL: 10
          ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        Enabled: True
        Origins:
          - DomainName: !GetAtt WebsiteS3Bucket.RegionalDomainName
            Id: !Sub "S3-origin-${WebsiteS3Bucket}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CDNCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginIdentity}"
            Resource: !Sub "arn:aws:s3:::${WebsiteS3Bucket}/*"
        Version: "2012-10-17"

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub 'www.velinfo.fr'
          Type: A
          AliasTarget:
            DNSName: !GetAtt CDN.DomainName
            HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  WebsiteBucketUrl:
    Description: 'S3 Bucket Url'
    Value: !GetAtt 'WebsiteS3Bucket.WebsiteURL'
    